{
  "name": "passport-glue",
  "version": "0.0.2",
  "description": "Glue for Passport and Mongoose",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/robbiegill/passport-glue.git"
  },
  "keywords": [
    "passport",
    "mongoose",
    "authentication",
    "users"
  ],
  "author": {
    "name": "Robbie Gill"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "dependencies": {
    "mongoose": "*",
    "node-uuid": "*",
    "goose-plugins": "*",
    "bcrypt": "*"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-jasmine-node": "*",
    "jasmine-node": "*"
  },
  "gitHead": "68218e858c4d13d2ce24d6cd61fe873307188ebc",
  "readme": "# passport-glue [![Build Status](https://travis-ci.org/robbiegill/passport-glue.png?branch=master)](https://travis-ci.org/robbiegill/passport-glue)\nAll the glue you need for integrating Passport, Express, and Mongoose.\n\nPassport provides everything you need to use oauth or other authorization methods with Google, GitHub, Twitter, and loads more.\nGlue plugins give your Mongoose models keys and methods to find or create users \nfrom authentication provider responses and to (de)serialize users for persistent sessions. \nSimultaneously support multiple authentication providers, just add the plugin for each provider you want to use.\n\nGlue currently supports:\n - persistent sessions\n - Passport\n    - passport-github\n    - passport-google-oauth (oauth2)\n    - passport-twitter\n\nMore to come...\n\n\n## How to\n\n### Setup your user model with GitHub authorization and persistent sessions\nGlue provides the keys for authentication type and attributes provided by an authentication provider. \nUse the provided base schema (as below) or plugin `glue.auth_provider_type` and 1 or more provider plugins to your Mongoose schema. \n\n```js\n  var glue = require('passport-glue');\n  \n  var userSchema = glue.userSchema;\n  userSchema.plugin(glue.github_oauth2_plugin);\n  userSchema.plugin(glue.persistent_sessions_plugin);\n  mongoose.model('User', userSchema);\n```    \n### passport.use GitHub Strategy\nGlue provides the static findOrCreateGitHubUser function.\n\n```js\n  passport.use(new GitHubStrategy({\n      clientID: config.authGitHub.ID,\n      clientSecret: config.authGitHub.SECRET,\n      callbackURL: config.authGitHub.callbackURL\n    },\n    function (accessToken, refreshToken, profile, done) {\n      User.findOrCreateGitHubUser(accessToken, refreshToken, profile, done);\n    }\n  ));\n```    \n### Persistent sessions\nGlue provides the static serialize and deserialize functions for restoring user sessions from cookies.\n```js\n  passport.serializeUser(function (user, done) {\n    User.serializeUser(user, done);\n  });\n  \n  passport.deserializeUser(function (obj, done) {\n    User.deserializeUser(obj, done);\n  });\n```    \n### Express and Passport sessions\n```js\n  app.use(express.cookieParser());\n  app.use(express.bodyParser());\n  app.use(express.session({ secret: 'my secret' }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n```  \n### Add Google \nGlue provides the static findOrCreateGoogleUser function.\n```js\n  userSchema.plugin(glue.google_oauth2_plugin)\n\n  passport.use(new GoogleStrategy({\n      clientID: config.authGoogle.ID,\n      clientSecret: config.authGoogle.SECRET,\n      callbackURL: config.authGoogle.callbackURL\n    },\n    function (token, tokenSecret, profile, done) {\n      User.findOrCreateGoogleUser(token, tokenSecret, profile, done);\n    }\n  ));\n```\n### Add Twitter \nGlue provides the static findOrCreateTwitterUser function.\n```js\n  userSchema.plugin(glue.twitter_oauth1a_plugin)\n\n  passport.use(new TwitterStrategy({\n      consumerKey: config.authTwitter.ID,\n      consumerSecret: config.authTwitter.SECRET,\n      callbackURL: config.authTwitter.callbackURL\n    },\n    function (token, tokenSecret, profile, done) {\n      User.findOrCreateTwitterUser(token, tokenSecret, profile, done);\n    }\n  ));\n```\n\n## Thanks\nThis builds on the work of many others, thanks!\n\n - [Passport](https://github.com/jaredhanson/passport)\n - [Mongoose](https://github.com/LearnBoost/mongoose)\n - [Express](https://github.com/visionmedia/express)\n - And many more\n  \n    \n## License\n\nOSI: The BSD License, FSF: The Modified BSD License\n",
  "bugs": {
    "url": "https://github.com/robbiegill/passport-glue/issues"
  },
  "_id": "passport-glue@0.0.2",
  "dist": {
    "shasum": "c239c0723cf5a2efda519b488e652630c5848735"
  },
  "_from": "passport-glue@*",
  "_resolved": "https://registry.npmjs.org/passport-glue/-/passport-glue-0.0.2.tgz"
}
